// Generated by Avo VERSION 42.2.0, PLEASE EDIT WITH CARE
/* tslint:disable */
/* eslint-disable */

// fetch() polyfill
;(function() {
  if (typeof window === 'undefined') {
    return
  }
  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob()
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self,
  }

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]',
    ]

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return (
          obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
        )
      }
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name)
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value)
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift()
        return {done: value === undefined, value: value}
      },
    }

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      }
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {}

    if (headers instanceof Headers) {
      ;(headers as any).forEach(function(value, name) {
        this.append(name, value)
      }, this)
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1])
      }, this)
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name])
      }, this)
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name)
    value = normalizeValue(value)
    var oldValue = this.map[name]
    this.map[name] = oldValue ? oldValue + ', ' + value : value
  }

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)]
  }

  Headers.prototype.get = function(name) {
    name = normalizeName(name)
    return this.has(name) ? this.map[name] : null
  }

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  }

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value)
  }

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this)
      }
    }
  }

  Headers.prototype.keys = function() {
    var items: any = []
    this.forEach(function(value, name) {
      items.push(name)
    })
    return iteratorFor(items)
  }

  Headers.prototype.values = function() {
    var items: any = []
    this.forEach(function(value) {
      items.push(value)
    })
    return iteratorFor(items)
  }

  Headers.prototype.entries = function() {
    var items: any = []
    this.forEach(function(value, name) {
      items.push([name, value])
    })
    return iteratorFor(items)
  }

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result)
      }
      reader.onerror = function() {
        reject(reader.error)
      }
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsArrayBuffer(blob)
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsText(blob)
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf)
    var chars = new Array(view.length)

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i])
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength)
      view.set(new Uint8Array(buf))
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false

    this._initBody = function(body) {
      this._bodyInit = body
      if (!body) {
        this._bodyText = ''
      } else if (typeof body === 'string') {
        this._bodyText = body
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body
      } else if (
        support.searchParams &&
        URLSearchParams.prototype.isPrototypeOf(body)
      ) {
        this._bodyText = body.toString()
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer)
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer])
      } else if (
        support.arrayBuffer &&
        (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))
      ) {
        this._bodyArrayBuffer = bufferClone(body)
      } else {
        this._bodyText = body = Object.prototype.toString.call(body)
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8')
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type)
        } else if (
          support.searchParams &&
          URLSearchParams.prototype.isPrototypeOf(body)
        ) {
          this.headers.set(
            'content-type',
            'application/x-www-form-urlencoded;charset=UTF-8',
          )
        }
      }
    }

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      }

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      }
    }

    this.text = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    }

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      }
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    }

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

  function normalizeMethod(method) {
    var upcased = method.toUpperCase()
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {}
    var body = options.body

    if (input instanceof Request) {
      if ((input as any).bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = (input as any).url
      this.credentials = (input as any).credentials
      if (!options.headers) {
        this.headers = new Headers((input as any).headers)
      }
      this.method = (input as any).method
      this.mode = (input as any).mode
      this.signal = (input as any).signal
      if (!body && (input as any)._bodyInit != null) {
        body = (input as any)._bodyInit
        ;(input as any).bodyUsed = true
      }
    } else {
      this.url = String(input)
    }

    this.credentials = options.credentials || this.credentials || 'same-origin'
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers)
    }
    this.method = normalizeMethod(options.method || this.method || 'GET')
    this.mode = options.mode || this.mode || null
    this.signal = options.signal || this.signal
    this.referrer = null

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body)
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  }

  function decode(body) {
    var form = new FormData()
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=')
          var name = split.shift().replace(/\+/g, ' ')
          var value = split.join('=').replace(/\+/g, ' ')
          form.append(decodeURIComponent(name), decodeURIComponent(value))
        }
      })
    return form
  }

  function parseHeaders(rawHeaders) {
    // @ts-ignore
    var headers = new Headers()
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
    return headers
  }

  Body.call(Request.prototype)

  function Response(bodyInit, options) {
    if (!options) {
      options = {}
    }

    this.type = 'default'
    this.status = options.status === undefined ? 200 : options.status
    this.ok = this.status >= 200 && this.status < 300
    this.statusText = 'statusText' in options ? options.statusText : 'OK'
    this.headers = new Headers(options.headers)
    this.url = options.url || ''
    this._initBody(bodyInit)
  }

  Body.call(Response.prototype)

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url,
    })
  }

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''})
    response.type = 'error'
    return response
  }

  var redirectStatuses = [301, 302, 303, 307, 308]

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  }

  ;(self as any).DOMException = (self as any).DOMException
  try {
    new (self as any).DOMException()
  } catch (err) {
    ;(self as any).DOMException = function(message, name) {
      this.message = message
      this.name = name
      var error = Error(message)
      this.stack = error.stack
    }
    ;(self as any).DOMException.prototype = Object.create(Error.prototype)
    ;(self as any).DOMException.prototype.constructor = (self as any).DOMException
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init)

      if (request.signal && request.signal.aborted) {
        return reject(new (self as any).DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest()

      function abortXhr() {
        xhr.abort()
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || ''),
        }
        ;(options as any).url =
          'responseURL' in xhr
            ? xhr.responseURL
            : options.headers.get('X-Request-URL')
        var body = 'response' in xhr ? xhr.response : (xhr as any).responseText
        resolve(new Response(body, options))
      }

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.onabort = function() {
        reject(new (self as any).DOMException('Aborted', 'AbortError'))
      }

      xhr.open(request.method, request.url, true)

      if (request.credentials === 'include') {
        xhr.withCredentials = true
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob'
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr)

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr)
          }
        }
      }

      xhr.send(
        typeof request._bodyInit === 'undefined' ? null : request._bodyInit,
      )
    })
  }

  fetch.polyfill = true

  if (!self.fetch) {
    ;(self as any).fetch = fetch
    ;(self as any).Headers = Headers
    ;(self as any).Request = Request
    ;(self as any).Response = Response
  }
})()

export enum AvoEnv {
  Prod = 'prod',
  Staging = 'staging',
  Dev = 'dev',
}

let __ENV__: AvoEnv | null = null
// @ts-ignore
let __WEB_DEBUGGER__: boolean = true

// polyfill Object.assign
// @ts-ignore
declare interface ObjectConstructor {
  assign: any
}
// @ts-ignore
if (typeof Object.assign !== 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, 'assign', {
    value: function assign(target: any, _varArgs: any) {
      // .length of function is 2
      if (target == null) {
        // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object')
      }

      var to = Object(target)

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index]

        if (nextSource != null) {
          // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey]
            }
          }
        }
      }
      return to
    },
    writable: true,
    configurable: true,
  })
}

let AvoAssert = {
  assertObject: function assertObject(
    propertyId: string,
    propName: string,
    obj: object,
  ) {
    if (typeof obj !== 'object') {
      let message =
        propName +
        ' should be of type object but you provided type ' +
        typeof obj +
        ' with value ' +
        JSON.stringify(obj)
      console.error('[avo] ' + message)
      return [{tag: 'expectedObjectType', propertyId, message}]
    } else {
      return []
    }
  },

  assertString: function assertString(
    propertyId: string,
    propName: string,
    str: string,
  ) {
    if (typeof str !== 'string') {
      let message =
        propName +
        ' should be of type string but you provided type ' +
        typeof str +
        ' with value ' +
        JSON.stringify(str)
      console.error('[avo] ' + message)
      return [{tag: 'expectedStringType', propertyId, message}]
    } else {
      return []
    }
  },

  assertInt: function assertInt(
    propertyId: string,
    propName: string,
    int: number,
  ) {
    if (typeof int === 'number' && int !== Math.round(int)) {
      let message =
        propName +
        ' should be of type int but you provided type float with value ' +
        JSON.stringify(int)
      console.error('[avo] ' + message)
      return [{tag: 'expectedIntType', propertyId, message}]
    } else if (typeof int !== 'number') {
      let message =
        propName +
        ' should be of type int but you provided type ' +
        typeof int +
        ' with value ' +
        JSON.stringify(int)
      console.error('[avo] ' + message)
      return [{tag: 'expectedIntType', propertyId, message}]
    } else {
      return []
    }
  },

  assertLong: function assertLong(
    propertyId: string,
    propName: string,
    long: number,
  ) {
    if (typeof long === 'number' && long !== Math.round(long)) {
      let message =
        propName +
        ' should be of type long but you provided type float with value ' +
        JSON.stringify(long)
      console.error('[avo] ' + message)
      return [{tag: 'expectedLongType', propertyId, message}]
    } else if (typeof long !== 'number') {
      let message =
        propName +
        ' should be of type long but you provided type ' +
        typeof long +
        ' with value ' +
        JSON.stringify(long)
      console.error('[avo] ' + message)
      return [{tag: 'expectedLongType', propertyId, message}]
    } else {
      return []
    }
  },

  assertFloat: function assertFloat(
    propertyId: string,
    propName: string,
    float: number,
  ) {
    if (typeof float !== 'number') {
      let message =
        propName +
        ' should be of type float but you provided type ' +
        typeof float +
        ' with value ' +
        JSON.stringify(float)
      console.error('[avo] ' + message)
      return [{tag: 'expectedFloatType', propertyId, message}]
    } else {
      return []
    }
  },

  assertBool: function assertBool(
    propertyId: string,
    propName: string,
    bool: boolean,
  ) {
    if (typeof bool !== 'boolean') {
      let message =
        propName +
        ' should be of type boolean but you provided type ' +
        typeof bool +
        ' with value ' +
        JSON.stringify(bool)
      console.error('[avo] ' + message)
      return [{tag: 'expectedBoolType', propertyId, message}]
    } else {
      return []
    }
  },

  assertMax: function assertMax(
    propertyId: string,
    propName: string,
    max: number,
    value: number,
  ) {
    if (value > max) {
      let message =
        propName +
        ' has a maximum value of ' +
        max +
        ' but you provided the value ' +
        JSON.stringify(value)
      console.error('[avo] ' + message)
      return [{tag: 'expectedMax', propertyId, message}]
    } else {
      return []
    }
  },

  assertMin: function assertMin(
    propertyId: string,
    propName: string,
    min: number,
    value: number,
  ) {
    if (value < min) {
      let message =
        propName +
        ' has a minimum value of ' +
        min +
        ' but you provided the value ' +
        JSON.stringify(value)
      console.error(message)
      return [{tag: 'expectedMin', propertyId, message}]
    } else {
      return []
    }
  },

  assertList: function assertList(
    propertyId: string,
    propName: string,
    type: any,
    value: any,
  ) {
    if (!Array.isArray(value)) {
      let message =
        propName +
        ' should be of type list but you provided type ' +
        typeof value
      console.error('[avo] ' + message)
      return [{tag: 'expectedList', propertyId, message}]
    } else {
      return [].concat.apply(
        [],
        value.map(function(val, index) {
          let assertFunction =
            'assert' + type.charAt(0).toUpperCase() + type.slice(1)
          return (AvoAssert as any)[assertFunction](
            'item at index ' + index + ' in ' + propName,
            val,
          )
        }),
      )
    }
  },
}

let AvoLogger = {
  logEventSent: function logEventSent(
    eventName: string,
    eventProperties: any,
    userProperties: any,
  ): void {
    console.log(
      '[avo] Event Sent:',
      eventName,
      'Event Props:',
      eventProperties,
      'User Props:',
      userProperties,
    )
  },
}

let _avo_sampling_rate = 1.0
function _avo_invoke(
  eventId: string,
  hash: string,
  messages: {tag: string; propertyId: string}[],
) {
  // @ts-ignore
  if (typeof (window as any) === 'undefined') {
    return
  }
  if (_avo_sampling_rate > 0) {
    if (Math.random() < _avo_sampling_rate) {
      // @ts-ignore
      fetch('https://api.avo.app/i', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          ac: 'BZYgyFNJTelsmAuOcshc',
          br: 'master',
          en: __ENV__,
          ev: eventId,
          ha: hash,
          sc: 'Fhkg74qQluNK2bVtVT7v',
          se: new Date().toISOString(),
          so: 'nPBN0dZye',
          va: messages.length === 0,
          me: messages,
        }),
      })
        .then(function(res: any) {
          return res.json()
        })
        .then(function(data: any) {
          _avo_sampling_rate = data.sa
        })
        .catch(function() {})
    }
  }
}

function _avo_invoke_meta(
  type: string,
  messages: {tag: string; propertyId: string}[],
) {
  // @ts-ignore
  if (typeof (window as any) === 'undefined') {
    return
  }
  if (_avo_sampling_rate > 0) {
    if (Math.random() < _avo_sampling_rate) {
      // @ts-ignore
      fetch('https://api.avo.app/i', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          ac: 'BZYgyFNJTelsmAuOcshc',
          br: 'master',
          en: __ENV__,
          ty: type,
          sc: 'Fhkg74qQluNK2bVtVT7v',
          se: new Date().toISOString(),
          so: 'nPBN0dZye',
          va: messages.length === 0,
          me: messages,
        }),
      })
        .then(function(res: any) {
          return res.json()
        })
        .then(function(data: any) {
          _avo_sampling_rate = data.sa
        })
        .catch(function() {})
    }
  }
}

var _avo_debugger_events_during_boot: any = []
var _avo_debugger_ready = false

if (typeof (window as any) !== 'undefined') {
  window.addEventListener('message', function(event) {
    if (event.origin !== 'https://www.avo.app') {
      return
    }
    var iframe: any = document.getElementById('avo-debugger')
    if (
      iframe &&
      event &&
      event.data &&
      event.data.type_ === 'avo-debugger-update-style'
    ) {
      iframe.style = event.data.style
    } else if (
      iframe &&
      event &&
      event.data &&
      event.data.type_ === 'avo-debugger-ready'
    ) {
      var message = {
        type_: 'avo-debugger-boot-events',
        schemaId: 'Fhkg74qQluNK2bVtVT7v',
        href: window.location.href,
        events: _avo_debugger_events_during_boot,
      }
      _avo_debugger_events_during_boot = []
      _avo_debugger_ready = true
      iframe.contentWindow.postMessage(message, 'https://www.avo.app/_debugger')
    }
  })
}

function _avo_debugger_log(
  eventId,
  eventName,
  messages,
  eventProperties,
  userProperties,
) {
  if (typeof (window as any) === 'undefined') {
    return
  }
  var event = {
    eventId: eventId,
    eventName: eventName,
    messages: messages,
    timestamp: Date.now(),
    eventProperties,
    userProperties,
  }

  if (_avo_debugger_ready) {
    var message = {type_: 'avo-debugger-events', events: [event]}
    ;(document.getElementById('avo-debugger') as any).contentWindow.postMessage(
      message,
      'https://www.avo.app/_debugger',
    )
  } else {
    _avo_debugger_events_during_boot.push(event)
  }
}

let sysBuildNumber: any

export function setSystemProperties(properties: {
  buildNumber: string | null | undefined
}) {
  if (properties.buildNumber) {
    sysBuildNumber = properties.buildNumber
  }
}

let AnalyticsJs: any
export function initAvo(
  {env, webDebugger = true}: {env: AvoEnv; webDebugger?: boolean},
  systemProperties: {buildNumber: string | null | undefined},
  destinationOptions: any,
  AnalyticsJsDestination: any,
) {
  if (__ENV__ !== null) {
    return
  }
  __ENV__ = env
  __WEB_DEBUGGER__ =
    (typeof window !== 'undefined' &&
      (window as any).location.search.indexOf('avo_debug=1') > -1) ||
    (webDebugger !== false && __ENV__ !== AvoEnv.Prod)

  setSystemProperties(systemProperties)

  destinationOptions = destinationOptions || {}

  if (__WEB_DEBUGGER__) {
    ;(function() {
      if (typeof (window as any) === 'undefined') {
        return
      }
      var init = function() {
        var iframe: any = document.createElement('iframe')
        document.body.appendChild(iframe)
        iframe.id = 'avo-debugger'
        iframe.src = 'https://www.avo.app/_debugger'
        iframe.style = 'display: none;'
      }

      if (document.body) {
        init()
      } else {
        document.addEventListener('DOMContentLoaded', init)
      }
    })()
  }
  if (__ENV__ === AvoEnv.Prod) {
  }
  if (__ENV__ === AvoEnv.Dev) {
  }
  if (__ENV__ === AvoEnv.Staging) {
  }

  AnalyticsJs = AnalyticsJsDestination
  AnalyticsJs.make(env)
  if (__ENV__ === AvoEnv.Dev) {
    // debug console in Avo
    _avo_invoke_meta('init', [])
  }
}

/**
 * Breathe Link Created: No description
 *
 * @see {@link https://www.avo.app/schemas/Fhkg74qQluNK2bVtVT7v/events/8EjQVkBCH9}
 */
export function breatheLinkCreated() {
  // assert properties
  if (__ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: {tag: string; propertyId: string; message: string}[] = []
    // debug console in Avo
    _avo_invoke(
      '8EjQVkBCH9',
      '0bb4561d9f049655b3b0c79c5572369d73de131d3cf60d22e902070a32b67b5c',
      messages.map(m =>
        Object.assign({}, {tag: m.tag, propertyId: m.propertyId}),
      ),
    )
    AvoLogger.logEventSent(
      'Breathe Link Created',
      {
        build_number: sysBuildNumber,
      },
      {},
    )
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log(
        '8EjQVkBCH9',
        'Breathe Link Created',
        messages,
        [{id: 'OLDzVxEe3V', name: 'build_number', value: sysBuildNumber}],
        [],
      )
    }
  }

  // @ts-ignore
  let eventProperties: any = {}
  if (sysBuildNumber !== undefined && sysBuildNumber !== null) {
    eventProperties['build_number'] = sysBuildNumber
  }

  // @ts-ignore
  let userProperties: any = {}

  // destination AnalyticsJs
  AnalyticsJs.logEvent(
    'Breathe Link Created',
    (Object as any).assign({}, eventProperties),
  )
}

export default {
  AvoEnv,
  initAvo,
  setSystemProperties,
  breatheLinkCreated,
}

// AVOMODULEMAP:"AvoGen"
// AVOEVENTMAP:["breatheLinkCreated"]
