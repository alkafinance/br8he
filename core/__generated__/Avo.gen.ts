// Generated by Avo VERSION 41.2.0, PLEASE EDIT WITH CARE
/* tslint:disable */
/* eslint-disable */

export enum AvoEnv {
  Prod = 'prod',
  Staging = 'staging',
  Dev = 'dev',
}

let __ENV__: AvoEnv | null = null
// @ts-ignore
let __WEB_DEBUGGER__: boolean = true

// polyfill Object.assign
// @ts-ignore
declare interface ObjectConstructor {
  assign: any
}
// @ts-ignore
if (typeof Object.assign !== 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, 'assign', {
    value: function assign(target: any, _varArgs: any) {
      // .length of function is 2
      if (target == null) {
        // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object')
      }

      var to = Object(target)

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index]

        if (nextSource != null) {
          // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey]
            }
          }
        }
      }
      return to
    },
    writable: true,
    configurable: true,
  })
}

let AvoAssert = {
  assertObject: function assertObject(
    propertyId: string,
    propName: string,
    obj: object,
  ) {
    if (typeof obj !== 'object') {
      let message =
        propName +
        ' should be of type object but you provided type ' +
        typeof obj +
        ' with value ' +
        JSON.stringify(obj)
      console.error('[avo] ' + message)
      return [{tag: 'expectedObjectType', propertyId, message}]
    } else {
      return []
    }
  },

  assertString: function assertString(
    propertyId: string,
    propName: string,
    str: string,
  ) {
    if (typeof str !== 'string') {
      let message =
        propName +
        ' should be of type string but you provided type ' +
        typeof str +
        ' with value ' +
        JSON.stringify(str)
      console.error('[avo] ' + message)
      return [{tag: 'expectedStringType', propertyId, message}]
    } else {
      return []
    }
  },

  assertInt: function assertInt(
    propertyId: string,
    propName: string,
    int: number,
  ) {
    if (typeof int === 'number' && int !== Math.round(int)) {
      let message =
        propName +
        ' should be of type int but you provided type float with value ' +
        JSON.stringify(int)
      console.error('[avo] ' + message)
      return [{tag: 'expectedIntType', propertyId, message}]
    } else if (typeof int !== 'number') {
      let message =
        propName +
        ' should be of type int but you provided type ' +
        typeof int +
        ' with value ' +
        JSON.stringify(int)
      console.error('[avo] ' + message)
      return [{tag: 'expectedIntType', propertyId, message}]
    } else {
      return []
    }
  },

  assertLong: function assertLong(
    propertyId: string,
    propName: string,
    long: number,
  ) {
    if (typeof long === 'number' && long !== Math.round(long)) {
      let message =
        propName +
        ' should be of type long but you provided type float with value ' +
        JSON.stringify(long)
      console.error('[avo] ' + message)
      return [{tag: 'expectedLongType', propertyId, message}]
    } else if (typeof long !== 'number') {
      let message =
        propName +
        ' should be of type long but you provided type ' +
        typeof long +
        ' with value ' +
        JSON.stringify(long)
      console.error('[avo] ' + message)
      return [{tag: 'expectedLongType', propertyId, message}]
    } else {
      return []
    }
  },

  assertFloat: function assertFloat(
    propertyId: string,
    propName: string,
    float: number,
  ) {
    if (typeof float !== 'number') {
      let message =
        propName +
        ' should be of type float but you provided type ' +
        typeof float +
        ' with value ' +
        JSON.stringify(float)
      console.error('[avo] ' + message)
      return [{tag: 'expectedFloatType', propertyId, message}]
    } else {
      return []
    }
  },

  assertBool: function assertBool(
    propertyId: string,
    propName: string,
    bool: boolean,
  ) {
    if (typeof bool !== 'boolean') {
      let message =
        propName +
        ' should be of type boolean but you provided type ' +
        typeof bool +
        ' with value ' +
        JSON.stringify(bool)
      console.error('[avo] ' + message)
      return [{tag: 'expectedBoolType', propertyId, message}]
    } else {
      return []
    }
  },

  assertMax: function assertMax(
    propertyId: string,
    propName: string,
    max: number,
    value: number,
  ) {
    if (value > max) {
      let message =
        propName +
        ' has a maximum value of ' +
        max +
        ' but you provided the value ' +
        JSON.stringify(value)
      console.error('[avo] ' + message)
      return [{tag: 'expectedMax', propertyId, message}]
    } else {
      return []
    }
  },

  assertMin: function assertMin(
    propertyId: string,
    propName: string,
    min: number,
    value: number,
  ) {
    if (value < min) {
      let message =
        propName +
        ' has a minimum value of ' +
        min +
        ' but you provided the value ' +
        JSON.stringify(value)
      console.error(message)
      return [{tag: 'expectedMin', propertyId, message}]
    } else {
      return []
    }
  },

  assertList: function assertList(
    propertyId: string,
    propName: string,
    type: any,
    value: any,
  ) {
    if (!Array.isArray(value)) {
      let message =
        propName +
        ' should be of type list but you provided type ' +
        typeof value
      console.error('[avo] ' + message)
      return [{tag: 'expectedList', propertyId, message}]
    } else {
      return [].concat.apply(
        [],
        value.map(function(val, index) {
          let assertFunction =
            'assert' + type.charAt(0).toUpperCase() + type.slice(1)
          return (AvoAssert as any)[assertFunction](
            'item at index ' + index + ' in ' + propName,
            val,
          )
        }),
      )
    }
  },
}

let AvoLogger = {
  logEventSent: function logEventSent(
    eventName: string,
    eventProperties: any,
    userProperties: any,
  ): void {
    console.log(
      '[avo] Event Sent:',
      eventName,
      'Event Props:',
      eventProperties,
      'User Props:',
      userProperties,
    )
  },
}

let _avo_sampling_rate = 1.0
function _avo_invoke(
  eventId: string,
  hash: string,
  messages: {tag: string; propertyId: string}[],
) {
  // @ts-ignore
  if (typeof (window as any) === 'undefined') {
    return
  }
  if (_avo_sampling_rate > 0) {
    if (Math.random() < _avo_sampling_rate) {
      // @ts-ignore
      fetch('https://api.avo.app/i', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          ac: '49QLvJj60ELrS0hAGOPg',
          br: 'master',
          en: __ENV__,
          ev: eventId,
          ha: hash,
          sc: 'Fhkg74qQluNK2bVtVT7v',
          se: new Date().toISOString(),
          so: 'nPBN0dZye',
          va: messages.length === 0,
          me: messages,
        }),
      })
        .then(function(res: any) {
          return res.json()
        })
        .then(function(data: any) {
          _avo_sampling_rate = data.sa
        })
        .catch(function() {})
    }
  }
}

function _avo_invoke_meta(
  type: string,
  messages: {tag: string; propertyId: string}[],
) {
  // @ts-ignore
  if (typeof (window as any) === 'undefined') {
    return
  }
  if (_avo_sampling_rate > 0) {
    if (Math.random() < _avo_sampling_rate) {
      // @ts-ignore
      fetch('https://api.avo.app/i', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          ac: '49QLvJj60ELrS0hAGOPg',
          br: 'master',
          en: __ENV__,
          ty: type,
          sc: 'Fhkg74qQluNK2bVtVT7v',
          se: new Date().toISOString(),
          so: 'nPBN0dZye',
          va: messages.length === 0,
          me: messages,
        }),
      })
        .then(function(res: any) {
          return res.json()
        })
        .then(function(data: any) {
          _avo_sampling_rate = data.sa
        })
        .catch(function() {})
    }
  }
}

var _avo_debugger_events_during_boot: any = []
var _avo_debugger_ready = false

if (typeof (window as any) !== 'undefined') {
  window.addEventListener('message', function(event) {
    if (event.origin !== 'https://www.avo.app') {
      return
    }
    var iframe: any = document.getElementById('avo-debugger')
    if (
      iframe &&
      event &&
      event.data &&
      event.data.type_ === 'avo-debugger-update-style'
    ) {
      iframe.style = event.data.style
    } else if (
      iframe &&
      event &&
      event.data &&
      event.data.type_ === 'avo-debugger-ready'
    ) {
      var message = {
        type_: 'avo-debugger-boot-events',
        schemaId: 'Fhkg74qQluNK2bVtVT7v',
        href: window.location.href,
        events: _avo_debugger_events_during_boot,
      }
      _avo_debugger_events_during_boot = []
      _avo_debugger_ready = true
      iframe.contentWindow.postMessage(message, 'https://www.avo.app/_debugger')
    }
  })
}

function _avo_debugger_log(
  eventId: string,
  eventName: string,
  messages: {tag: string; propertyId: string; message: string}[],
  eventProperties: {id: string; name: string; value: any}[],
  userProperties: never[],
) {
  if (typeof (window as any) === 'undefined') {
    return
  }
  var event = {
    eventId: eventId,
    eventName: eventName,
    messages: messages,
    timestamp: Date.now(),
    eventProperties,
    userProperties,
  }

  if (_avo_debugger_ready) {
    var message = {type_: 'avo-debugger-events', events: [event]}
    ;(document.getElementById('avo-debugger') as any).contentWindow.postMessage(
      message,
      'https://www.avo.app/_debugger',
    )
  } else {
    _avo_debugger_events_during_boot.push(event)
  }
}

let sysBuildNumber: any

export function setSystemProperties(properties: {
  buildNumber: string | null | undefined
}) {
  if (properties.buildNumber) {
    sysBuildNumber = properties.buildNumber
  }
}

let AnalyticsJs: any
export function initAvo(
  {env, webDebugger = true}: {env: AvoEnv; webDebugger?: boolean},
  systemProperties: {buildNumber: string | null | undefined},
  destinationOptions: any,
  AnalyticsJsDestination: any,
) {
  if (__ENV__ !== null) {
    return
  }
  __ENV__ = env
  __WEB_DEBUGGER__ =
    (typeof window !== 'undefined' &&
      (window as any).location.search.indexOf('avo_debug=1') > -1) ||
    (webDebugger !== false && __ENV__ !== AvoEnv.Prod)

  setSystemProperties(systemProperties)

  destinationOptions = destinationOptions || {}

  if (__WEB_DEBUGGER__) {
    ;(function() {
      if (typeof (window as any) === 'undefined') {
        return
      }
      var init = function() {
        var iframe: any = document.createElement('iframe')
        document.body.appendChild(iframe)
        iframe.id = 'avo-debugger'
        iframe.src = 'https://www.avo.app/_debugger'
        iframe.style = 'display: none;'
      }

      if (document.body) {
        init()
      } else {
        document.addEventListener('DOMContentLoaded', init)
      }
    })()
  }
  if (__ENV__ === AvoEnv.Prod) {
  }
  if (__ENV__ === AvoEnv.Dev) {
  }
  if (__ENV__ === AvoEnv.Staging) {
  }

  AnalyticsJs = AnalyticsJsDestination
  AnalyticsJs.make(env)
  if (__ENV__ === AvoEnv.Dev) {
    // debug console in Avo
    _avo_invoke_meta('init', [])
  }
}

/**
 * Breathe Link Created: No description
 *
 * @see {@link https://www.avo.app/schemas/Fhkg74qQluNK2bVtVT7v/events/8EjQVkBCH9}
 */
export function breatheLinkCreated() {
  // assert properties
  if (__ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: {tag: string; propertyId: string; message: string}[] = []
    // debug console in Avo
    _avo_invoke(
      '8EjQVkBCH9',
      '0bb4561d9f049655b3b0c79c5572369d73de131d3cf60d22e902070a32b67b5c',
      messages.map(m =>
        Object.assign({}, {tag: m.tag, propertyId: m.propertyId}),
      ),
    )
    AvoLogger.logEventSent(
      'Breathe Link Created',
      {
        build_number: sysBuildNumber,
      },
      {},
    )
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log(
        '8EjQVkBCH9',
        'Breathe Link Created',
        messages,
        [{id: 'OLDzVxEe3V', name: 'build_number', value: sysBuildNumber}],
        [],
      )
    }
  }

  // @ts-ignore
  let eventProperties: any = {}
  if (sysBuildNumber !== undefined && sysBuildNumber !== null) {
    eventProperties['build_number'] = sysBuildNumber
  }

  // @ts-ignore
  let userProperties: any = {}

  // destination AnalyticsJs
  AnalyticsJs.logEvent(
    'Breathe Link Created',
    (Object as any).assign({}, eventProperties),
  )
}

export default {
  AvoEnv,
  initAvo,
  setSystemProperties,
  breatheLinkCreated,
}

// AVOMODULEMAP:"AvoGen"
// AVOEVENTMAP:["breatheLinkCreated"]
